import React, { useState, useEffect } from 'react';
import MyPieChart from './MyPiechart';
import jsPDF from 'jspdf';
import html2canvas from 'html2canvas';
import aboutLogo from '../images/aditya-logo.webp'

const DisplayClasses = () => {
  const [classes, setClasses] = useState([]);
  const [rating, setRating] = useState(0);
  const [chartData, setChartData] = useState({
    above95: 0,
    between85And95: 0,
    between75And85: 0,
    below75: 0,
    passPercentage: 0,
  });

  useEffect(() => {
    const fetchData = async () => {
      try {
        const token = localStorage.getItem('token');
        if (!token) {
          console.error("No token found in localStorage");
          return;
        }

        const response = await fetch('http://localhost:5000/update/data', {
          method: 'GET',
          credentials: 'include',
          headers: {
            'Content-Type': 'application/json',
            Authorization: `Bearer ${token}`,
          },
        });

        if (!response.ok) {
          console.error(`Failed to fetch data: ${response.statusText}`);
          const errorMessage = await response.text();
          console.error('Error message:', errorMessage);
          return;
        }

        const data = await response.json();

        setClasses(data.Data);
        setRating(data.overallRating);

        const newChartData = {
          above95: 0,
          between85And95: 0,
          between75And85: 0,
          below75: 0,
          passPercentage: 0,
        };

        data.Data.forEach((classItem) => {
          newChartData.above95 = classItem.above95 || 0;
          newChartData.between85And95 = classItem.between85And95 || 0;
          newChartData.between75And85 = classItem.between75And85 || 0;
          newChartData.below75 = classItem.below75 || 0;
          newChartData.passPercentage = classItem.passPercentage || 0;
        });

        if (data.Data.length > 0) {
          newChartData.passPercentage /= data.Data.length;
        }

        setChartData(newChartData);
      } catch (error) {
        console.error('Error occurred while fetching data:', error);
      }
    };

    fetchData();
  }, []);

  const downloadPDF = async () => {
    const doc = new jsPDF();
  
    // Load the logo image
    const viteLogo = new Image();
    viteLogo.src = aboutLogo;
  
    viteLogo.onload = () => {
      // Add logo and header
      doc.addImage(viteLogo, 'JPEG', 10, 5, 30, 15); // Adjust dimensions and position
      doc.setFontSize(20);
      doc.text('Aditya College', 50, 15);
      doc.setFontSize(12);
      doc.text('Faculty Evaluation Report', 50, 25);
  
      // Add a line under the header
      doc.setDrawColor(0, 0, 0); // Black
      doc.line(10, 30, 200, 30); // Horizontal line
  
      // Table Headers
      const tableStartY = 40;
      const headers = [
        { name: 'Course Name', width: 50 },
        { name: 'Attended', width: 30 },
        { name: 'Semester', width: 30 },
        { name: 'Branch', width: 30 },
        { name: 'Section', width: 20 },
        { name: 'Students', width: 30 },
        { name: 'Pass %', width: 30 },
      ];
  
      let currentX = 10;
  
      // Draw table headers
      headers.forEach((header) => {
        doc.text(header.name, currentX, tableStartY);
        currentX += header.width; // Use the specified column width
      });
  
      // Draw table rows
      let rowY = tableStartY + 10;
      doc.setFontSize(10); // Smaller font for row content
  
      // Add row data
      classes.forEach((classItem) => {
        currentX = 10;
  
        // Prepare row data (excluding Rating)
        const rowData = [
          classItem.courseName,
          classItem.appeared.toString(),
          classItem.semester,
          classItem.branch,
          classItem.section,
          classItem.numberOfStudents.toString(),
          `${classItem.passPercentage}%`,
        ];
  
        // Add row data
        rowData.forEach((data, index) => {
          doc.text(data, currentX, rowY);
          currentX += headers[index].width; // Use the specified column width
        });
  
        // Move to the next row
        rowY += 8; // Reduced vertical space between rows to make it more compact
  
        // Handle page overflow
        if (rowY > 260) {
          doc.addPage(); // Add a new page
          rowY = 40; // Reset row position
          currentX = 10;
  
          // Re-draw headers on the new page
          headers.forEach((header) => {
            doc.text(header.name, currentX, rowY - 10);
            currentX += header.width;
          });
        }
      });
  
      // Add Overall Rating (single rating for the first class)
      const overallRating = classes.length > 0 ? classes[0].rating : 'N/A';
      doc.setFontSize(12);
      doc.text(`Overall Rating: ${overallRating}`, 10, rowY + 10);
  
      // Add footer
      doc.setFontSize(10);
      doc.text('Generated by Aditya College Faculty Portal', 10, 290); // Footer message
      doc.text(`Page 1`, 180, 290); // Page number
  
      // Save the PDF after all content is added
      doc.save('class_data.pdf');
    };
  
    viteLogo.onerror = () => {
      console.error('Failed to load the logo image. Please check the path and try again.');
    };
  };
  

  
  
  
  
  

  return (
    <div style={{ padding: '30px', fontFamily: 'Arial, sans-serif' }}>
      <h1 style={{ textAlign: 'center', marginBottom: '30px', color: '#333' }}>Class Performance Dashboard</h1>
      <h2 style={{
        textAlign: 'center',
        color: 'rgb(255, 127, 39)',
        fontWeight: 'bold',
        borderBottom: '2px solid rgb(255, 127, 39)',
        paddingBottom: '10px',
        display: 'inline-block',
        marginBottom: '30px',

      }}>
        Overall Rating: {rating}
      </h2>

      {classes.length > 0 ? (
        <div style={{
          display: 'flex',
          flexDirection: 'column',
          gap: '20px',
        }}>
          {classes.map((classItem) => {
            const generateLink = () => {
              const link = `http://localhost:5173/rate/${classItem._id}`; // Replace with your actual link structure
              navigator.clipboard.writeText(link); // Copy link to clipboard
              alert('Link copied to clipboard!'); // Notify user
            };

            return (
              <div
                key={classItem._id}
                style={{
                  border: '1px solid #ccc',
                  borderRadius: '8px',
                  padding: '20px',
                  backgroundColor: '#fdfdfd',
                  boxShadow: '0 4px 12px rgba(0, 0, 0, 0.2)',
                  width: '100%', // Ensure full width to take large card space
                }}
              >
                <div style={{
                  display: 'flex',
                  alignItems: 'center',
                  justifyContent: 'space-between',
                  marginBottom: '15px',
                }}>
                  <h3 style={{
                    margin: 0,
                    fontSize: '1.5rem',
                    color: '#4CAF50',
                  }}>
                   
                    {classItem.courseName}
                  </h3>
                  <span style={{
                    backgroundColor: '#4CAF50',
                    color: '#fff',
                    padding: '5px 10px',
                    borderRadius: '20px',
                    fontSize: '0.9rem',
                    fontWeight: 'bold',
                  }}>
                    Rating: {classItem.rating}
                  </span>
                </div>

                <div style={{
                  display: 'grid',
                  gridTemplateColumns: '1fr 1fr',
                  gap: '15px',
                  fontSize: '0.9rem',
                  lineHeight: '1.6',
                }}>
                  <div>
                    <p><strong>Attended:</strong>    {classItem.appeared} </p>
                    <p><strong>Semester:</strong> {classItem.semester}</p>
                    <p><strong>Branch:</strong> {classItem.branch}</p>
                  </div>
                  <div>
                    <p><strong>Section:</strong> {classItem.section}</p>
                    <p><strong>Number of Students:</strong> {classItem.numberOfStudents}</p>
                    <p><strong>Pass Percentage:</strong> {classItem.passPercentage}%</p>
                  </div>
                </div>
        
                <div style={{
                  marginTop: '20px',
                  padding: '10px',
                  backgroundColor: '#f9f9f9',
                  borderRadius: '5px',
                  border: '1px solid #eee',
                }}>
               
                  <MyPieChart id={`chart-${classItem._id}`} chartData={chartData} />
                </div>
                
                <div style={{ display: 'flex', alignItems: 'center', gap: '15px', marginTop: '20px' }}>
                  <span style={{ fontSize: '1rem', color: '#333', fontWeight: '500' }}>
                    Share this link to the Students for Feedback
                  </span>
                  <button onClick={generateLink} style={{ 
                    padding: '10px 15px', 
                    backgroundColor: "rgb(117 117 117)", 
                    color: '#fff', 
                    width: '150px', 
                    border: 'none', 
                    borderRadius: '5px', 
                    cursor: 'pointer',
                    transition: 'background-color 0.3s ease',
                  }} 
                  onMouseOver={(e) => e.currentTarget.style.backgroundColor = '#45a049'}
                  onMouseOut={(e) => e.currentTarget.style.backgroundColor = '#rgb(117 117 117)'}>
                    Share Link
                  </button>
                </div>
              </div>
            );
          })}
        </div>
      ) : (
        <p style={{ textAlign: 'center', fontSize: '18px', color: '#FF5722' }}>No classes found.</p>
      )}

      <button onClick={downloadPDF} style={{ 
        padding: '10px 15px', 
        backgroundColor: '#FF5722', 
        color: '#fff', 
       
        border: 'none', 
        borderRadius: '5px', 
        cursor: 'pointer',
        transition: 'background-color 0.3s ease',
      }} 
      onMouseOver={(e) => e.currentTarget.style.backgroundColor = '#e64a19'}
      onMouseOut={(e) => e.currentTarget.style.backgroundColor = '#FF5722'}>
        Download Report 
      </button>
    </div>
  );
};

export default DisplayClasses;